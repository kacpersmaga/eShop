@{
    ViewData["Title"] = "Profile";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Account Profile</h2>

<div class="row">
    <div class="col-md-6">
        <div class="card mb-4">
            <div class="card-header">
                <h3>Profile Information</h3>
            </div>
            <div class="card-body">
                <form id="profileForm">
                    <div class="form-group mb-3">
                        <label for="userName">Username</label>
                        <input type="text" class="form-control" id="userName" name="userName" readonly />
                    </div>
                    <div class="form-group mb-3">
                        <label for="email">Email</label>
                        <div class="input-group">
                            <input type="email" class="form-control" id="email" name="email" readonly />
                            <button type="button" id="changeEmailBtn" class="btn btn-outline-secondary">Change</button>
                        </div>
                        <small id="emailStatus" class="form-text"></small>
                    </div>

                    <!-- Email Change Forms -->
                    <div id="emailVerification" style="display:none;" class="mt-3 mb-3">
                        <div class="alert alert-info">Enter the verification code sent to your 2FA device to authorize this change.</div>
                        <div class="form-group">
                            <label for="emailCode">Verification Code</label>
                            <input type="text" class="form-control" id="emailCode" name="emailCode" />
                        </div>
                        <div class="form-group mt-3">
                            <label for="newEmail">New Email</label>
                            <input type="email" class="form-control" id="newEmail" name="newEmail" />
                        </div>
                        <button type="button" id="completeEmailBtn" class="btn btn-primary mt-2">Update Email</button>
                    </div>

                    <div id="emailChangeForm" style="display:none;" class="mt-3 mb-3">
                        <div class="form-group">
                            <label for="newEmail">New Email</label>
                            <input type="email" class="form-control" id="newEmail" name="newEmail" />
                        </div>
                        <button type="button" id="completeEmailBtn" class="btn btn-primary mt-2">Update Email</button>
                    </div>

                    <!-- Phone Number Section -->
                    <div class="form-group mb-3">
                        <label for="phoneNumber">Phone Number</label>
                        <div class="input-group">
                            <input type="tel" class="form-control" id="phoneNumber" name="phoneNumber" placeholder="+1234567890" />
                            <button type="button" id="updatePhoneBtn" class="btn btn-outline-secondary">Update</button>
                        </div>
                        <small id="phoneStatus" class="form-text"></small>
                    </div>
                    <div id="phoneVerification" style="display:none;" class="mt-3">
                        <div class="form-group">
                            <label for="phoneCode">Verification Code</label>
                            <input type="text" class="form-control" id="phoneCode" name="phoneCode" />
                        </div>
                        <button type="button" id="verifyPhoneBtn" class="btn btn-primary mt-2">Verify Phone</button>
                    </div>
                </form>
                <div id="profileMessage" class="mt-3"></div>
            </div>
        </div>

        <div class="card mb-4">
            <div class="card-header">
                <h3>Security Settings</h3>
            </div>
            <div class="card-body">
                <!-- Two-Factor Authentication Section -->
                <div class="mb-3">
                    <h4>Two-Factor Authentication</h4>
                    <p id="twoFactorStatus">Loading status...</p>
                    <div id="twoFactorControls">
                        <a href="/Account/Enable2fa" class="btn btn-primary" id="enable2faBtn">Enable 2FA</a>
                        <button class="btn btn-danger" id="disable2faBtn" style="display:none;">Disable 2FA</button>
                    </div>
                    <div id="twoFactorVerification" style="display:none;" class="mt-3">
                        <div class="form-group">
                            <label for="twoFactorCode">Verification Code</label>
                            <input type="text" class="form-control" id="twoFactorCode" name="twoFactorCode" />
                        </div>
                        <button type="button" id="verifyTwoFactorBtn" class="btn btn-primary mt-2">Verify Code</button>
                    </div>
                </div>

                <!-- Password Change Section -->
                <div class="mt-4 mb-4">
                    <h4>Change Password</h4>
                    <button type="button" id="showChangePasswordBtn" class="btn btn-secondary">Change Password</button>

                    <!-- Step 1: Password Initiation Form -->
                    <div id="passwordInitiationForm" style="display:none;" class="mt-3">
                        <div class="form-group mb-3">
                            <label for="currentPassword">Current Password</label>
                            <input type="password" class="form-control" id="currentPassword" name="currentPassword" />
                        </div>
                        <button type="button" id="verifyPasswordBtn" class="btn btn-primary">Continue</button>
                    </div>

                    <!-- Step 2a: 2FA Verification Form (only shown if 2FA enabled) -->
                    <div id="passwordVerification" style="display:none;" class="mt-3">
                        <div class="alert alert-info">Enter the verification code sent to your 2FA device to authorize this change.</div>
                        <div class="form-group">
                            <label for="passwordCode">Verification Code</label>
                            <input type="text" class="form-control" id="passwordCode" name="passwordCode" />
                        </div>
                        <div class="form-group mt-3">
                            <label for="newPassword">New Password</label>
                            <input type="password" class="form-control" id="newPassword" name="newPassword" />
                        </div>
                        <div class="form-group mt-3">
                            <label for="confirmNewPassword">Confirm New Password</label>
                            <input type="password" class="form-control" id="confirmNewPassword" name="confirmNewPassword" />
                        </div>
                        <button type="button" id="completePasswordBtn" class="btn btn-primary mt-2">Change Password</button>
                    </div>

                    <!-- Step 2b: New Password Form (shown if no 2FA enabled) -->
                    <div id="passwordChangeForm" style="display:none;" class="mt-3">
                        <div class="form-group mb-3">
                            <label for="newPassword">New Password</label>
                            <input type="password" class="form-control" id="newPassword" name="newPassword" />
                        </div>
                        <div class="form-group mb-3">
                            <label for="confirmNewPassword">Confirm New Password</label>
                            <input type="password" class="form-control" id="confirmNewPassword" name="confirmNewPassword" />
                        </div>
                        <button type="button" id="completePasswordBtn" class="btn btn-primary">Change Password</button>
                    </div>
                </div>

                <!-- Account Deletion Section -->
                <div class="mt-4">
                    <h4 class="text-danger">Delete Account</h4>
                    <button type="button" id="deleteAccountBtn" class="btn btn-danger">Delete Account</button>
                    <div id="deleteAccountVerification" style="display:none;" class="mt-3">
                        <p class="text-danger">This action cannot be undone. Please verify with your 2FA code.</p>
                        <div class="form-group">
                            <label for="deleteAccountCode">Verification Code</label>
                            <input type="text" class="form-control" id="deleteAccountCode" name="deleteAccountCode" />
                        </div>
                        <button type="button" id="confirmDeleteBtn" class="btn btn-danger mt-2">Confirm Deletion</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', async function() {
        await loadUserProfile();

        // Event listeners
        document.getElementById('showChangePasswordBtn').addEventListener('click', function() {
            document.getElementById('passwordInitiationForm').style.display = 'block';
            this.style.display = 'none';
        });

        document.getElementById('changeEmailBtn').addEventListener('click', function() {
            initiateEmailChange();
        });

        document.getElementById('verifyPasswordBtn').addEventListener('click', function() {
            verifyPasswordChange();
        });

        document.getElementById('completePasswordBtn').addEventListener('click', function() {
            completePasswordChange();
        });

        document.getElementById('completeEmailBtn').addEventListener('click', function() {
            completeEmailChange();
        });

        document.getElementById('updatePhoneBtn').addEventListener('click', updatePhoneNumber);
        document.getElementById('verifyPhoneBtn').addEventListener('click', verifyPhone);
        document.getElementById('disable2faBtn').addEventListener('click', requestDisable2fa);
        document.getElementById('verifyTwoFactorBtn').addEventListener('click', confirmDisable2fa);
        document.getElementById('deleteAccountBtn').addEventListener('click', requestAccountDeletion);
        document.getElementById('confirmDeleteBtn').addEventListener('click', confirmAccountDeletion);
    });

    async function loadUserProfile() {
        try {
            const response = await fetch('/api/user/profile', {
                method: 'GET',
                credentials: 'include'
            });

            if (response.ok) {
                const user = await response.json();
                document.getElementById('userName').value = user.userName;
                document.getElementById('email').value = user.email;

                const emailStatus = document.getElementById('emailStatus');
                if (user.emailConfirmed) {
                    emailStatus.innerText = 'Email verified';
                    emailStatus.classList.add('text-success');
                } else {
                    emailStatus.innerHTML = 'Email not verified. <a href="#" id="resendEmailBtn">Resend verification email</a>';
                    emailStatus.classList.add('text-danger');
                    document.getElementById('resendEmailBtn').addEventListener('click', resendEmailConfirmation);
                }

                if (user.phoneNumber) {
                    document.getElementById('phoneNumber').value = user.phoneNumber;
                    const phoneStatus = document.getElementById('phoneStatus');
                    if (user.phoneNumberConfirmed) {
                        phoneStatus.innerText = 'Phone verified';
                        phoneStatus.classList.add('text-success');
                    } else {
                        phoneStatus.innerHTML = 'Phone not verified. <a href="#" id="verifyPhoneLink">Verify now</a>';
                        phoneStatus.classList.add('text-danger');
                        document.getElementById('verifyPhoneLink').addEventListener('click', sendPhoneVerification);
                    }
                }

                const twoFactorStatus = document.getElementById('twoFactorStatus');
                if (user.twoFactorEnabled) {
                    twoFactorStatus.innerText = '2FA is currently enabled using ' + (user.twoFactorType || 'Authenticator App');
                    twoFactorStatus.classList.add('text-success');
                    document.getElementById('enable2faBtn').style.display = 'none';
                    document.getElementById('disable2faBtn').style.display = 'inline-block';
                } else {
                    twoFactorStatus.innerText = '2FA is currently disabled';
                    twoFactorStatus.classList.add('text-warning');
                }
            } else {
                const result = await response.json();
                showMessage('profileMessage', result.message || 'Failed to load profile', 'danger');
            }
        } catch (error) {
            showMessage('profileMessage', 'An error occurred while loading your profile.', 'danger');
        }
    }

    async function updatePhoneNumber() {
        const phoneNumber = document.getElementById('phoneNumber').value;
        const xsrfToken = getCookie('XSRF-TOKEN');

        if (!phoneNumber) {
            showMessage('profileMessage', 'Please enter a phone number', 'danger');
            return;
        }

        try {
            const response = await fetch('/api/user/update-phone', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': xsrfToken
                },
                credentials: 'include',
                body: JSON.stringify({ phoneNumber })
            });

            if (response.ok) {
                showMessage('profileMessage', 'Phone number updated. Verification code sent.', 'success');
                document.getElementById('phoneVerification').style.display = 'block';
            } else {
                const result = await response.json();
                showMessage('profileMessage', result.message || 'Failed to update phone number', 'danger');
            }
        } catch (error) {
            showMessage('profileMessage', 'An error occurred', 'danger');
        }
    }

    async function verifyPhone() {
        const code = document.getElementById('phoneCode').value;
        const xsrfToken = getCookie('XSRF-TOKEN');

        try {
            const response = await fetch('/api/user/verify-phone', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': xsrfToken
                },
                credentials: 'include',
                body: JSON.stringify({ code })
            });

            if (response.ok) {
                showMessage('profileMessage', 'Phone number verified successfully', 'success');
                document.getElementById('phoneVerification').style.display = 'none';
                await loadUserProfile();
            } else {
                const result = await response.json();
                showMessage('profileMessage', result.message || 'Failed to verify phone number', 'danger');
            }
        } catch (error) {
            showMessage('profileMessage', 'An error occurred', 'danger');
        }
    }

    async function sendPhoneVerification(e) {
        e.preventDefault();
        const xsrfToken = getCookie('XSRF-TOKEN');

        try {
            const response = await fetch('/api/user/send-phone-verification', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': xsrfToken
                },
                credentials: 'include'
            });

            if (response.ok) {
                showMessage('profileMessage', 'Verification code sent', 'success');
                document.getElementById('phoneVerification').style.display = 'block';
            } else {
                const result = await response.json();
                showMessage('profileMessage', result.message || 'Failed to send verification code', 'danger');
            }
        } catch (error) {
            showMessage('profileMessage', 'An error occurred', 'danger');
        }
    }

    async function resendEmailConfirmation(e) {
        e.preventDefault();
        const xsrfToken = getCookie('XSRF-TOKEN');

        try {
            const response = await fetch('/api/auth/send-confirmation-email', {
                method: 'POST',
                headers: {
                    'X-CSRF-TOKEN': xsrfToken
                },
                credentials: 'include'
            });

            if (response.ok) {
                showMessage('profileMessage', 'Confirmation email sent successfully', 'success');
            } else {
                const result = await response.json();
                showMessage('profileMessage', result.message || 'Failed to send confirmation email', 'danger');
            }
        } catch (error) {
            showMessage('profileMessage', 'An error occurred', 'danger');
        }
    }

    async function initiateEmailChange() {
        const xsrfToken = getCookie('XSRF-TOKEN');

        try {
            const response = await fetch('/api/user/initiate-email-change', {
                method: 'POST',
                headers: {
                    'X-CSRF-TOKEN': xsrfToken
                },
                credentials: 'include'
            });

            const result = await response.json();

            if (response.ok) {
                if (result.requiresTwoFactor) {
                    showMessage('profileMessage', result.message, 'info');
                    document.getElementById('emailVerification').style.display = 'block';
                } else {
                    // If 2FA not required, show the email change form directly
                    showMessage('profileMessage', result.message, 'success');
                    document.getElementById('emailChangeForm').style.display = 'block';
                }
            } else {
                showMessage('profileMessage', result.message || 'Failed to initiate email change', 'danger');
            }
        } catch (error) {
            showMessage('profileMessage', 'An error occurred', 'danger');
        }
    }

    async function completeEmailChange() {
        const newEmail = document.getElementById('newEmail').value;
        const verificationCode = document.getElementById('emailCode') ? document.getElementById('emailCode').value : null;
        const xsrfToken = getCookie('XSRF-TOKEN');

        if (!newEmail) {
            showMessage('profileMessage', 'Please enter a new email address', 'danger');
            return;
        }

        try {
            const response = await fetch('/api/user/complete-email-change', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': xsrfToken
                },
                credentials: 'include',
                body: JSON.stringify({
                    newEmail,
                    verificationCode
                })
            });

            if (response.ok) {
                const result = await response.json();
                showMessage('profileMessage', result.message, 'success');

                // Reset and hide forms
                document.getElementById('emailVerification').style.display = 'none';
                document.getElementById('emailChangeForm').style.display = 'none';
                document.getElementById('newEmail').value = '';
                if (document.getElementById('emailCode')) {
                    document.getElementById('emailCode').value = '';
                }

                // Refresh profile to show new email
                await loadUserProfile();
            } else {
                const result = await response.json();
                showMessage('profileMessage', result.message || 'Failed to update email', 'danger');
            }
        } catch (error) {
            showMessage('profileMessage', 'An error occurred', 'danger');
        }
    }

    async function verifyPasswordChange() {
        const currentPassword = document.getElementById('currentPassword').value;
        const xsrfToken = getCookie('XSRF-TOKEN');

        if (!currentPassword) {
            showMessage('profileMessage', 'Please enter your current password', 'danger');
            return;
        }

        try {
            const response = await fetch('/api/user/initiate-password-change', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': xsrfToken
                },
                credentials: 'include',
                body: JSON.stringify({ currentPassword })
            });

            const result = await response.json();

            if (response.ok) {
                if (result.requiresTwoFactor) {
                    showMessage('profileMessage', result.message, 'info');
                    document.getElementById('passwordInitiationForm').style.display = 'none';
                    document.getElementById('passwordVerification').style.display = 'block';
                } else {
                    showMessage('profileMessage', result.message, 'success');
                    document.getElementById('passwordInitiationForm').style.display = 'none';
                    document.getElementById('passwordChangeForm').style.display = 'block';
                }
            } else {
                showMessage('profileMessage', result.message || 'Failed to verify identity', 'danger');
            }
        } catch (error) {
            showMessage('profileMessage', 'An error occurred', 'danger');
        }
    }

    async function completePasswordChange() {
        const currentPassword = document.getElementById('currentPassword').value;
        const newPassword = document.getElementById('newPassword').value;
        const confirmNewPassword = document.getElementById('confirmNewPassword').value;
        const verificationCode = document.getElementById('passwordCode') ? document.getElementById('passwordCode').value : null;
        const xsrfToken = getCookie('XSRF-TOKEN');

        if (!newPassword || !confirmNewPassword) {
            showMessage('profileMessage', 'Please fill all password fields', 'danger');
            return;
        }

        if (newPassword !== confirmNewPassword) {
            showMessage('profileMessage', 'New passwords do not match', 'danger');
            return;
        }

        try {
            const response = await fetch('/api/user/complete-password-change', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': xsrfToken
                },
                credentials: 'include',
                body: JSON.stringify({
                    currentPassword,
                    newPassword,
                    confirmNewPassword: confirmNewPassword,
                    verificationCode
                })
            });

            if (response.ok) {
                const result = await response.json();
                showMessage('profileMessage', result.message, 'success');

                // Reset form and hide all password forms
                document.getElementById('passwordVerification').style.display = 'none';
                document.getElementById('passwordChangeForm').style.display = 'none';
                document.getElementById('passwordInitiationForm').style.display = 'none';
                document.getElementById('showChangePasswordBtn').style.display = 'inline-block';
                document.getElementById('currentPassword').value = '';
                document.getElementById('newPassword').value = '';
                document.getElementById('confirmNewPassword').value = '';
                if (document.getElementById('passwordCode')) {
                    document.getElementById('passwordCode').value = '';
                }
            } else {
                const result = await response.json();
                showMessage('profileMessage', result.message || 'Failed to change password', 'danger');
            }
        } catch (error) {
            showMessage('profileMessage', 'An error occurred', 'danger');
        }
    }

    async function requestDisable2fa() {
        const xsrfToken = getCookie('XSRF-TOKEN');

        try {
            const response = await fetch('/api/user/disable-2fa', {
                method: 'POST',
                headers: {
                    'X-CSRF-TOKEN': xsrfToken
                },
                credentials: 'include'
            });

            const result = await response.json();

            if (response.ok) {
                if (result.requiresVerification) {
                    showMessage('profileMessage', result.message, 'info');
                    document.getElementById('twoFactorVerification').style.display = 'block';
                } else {
                    showMessage('profileMessage', result.message, 'success');
                    await loadUserProfile();
                }
            } else {
                showMessage('profileMessage', result.message || 'Failed to disable 2FA', 'danger');
            }
        } catch (error) {
            showMessage('profileMessage', 'An error occurred', 'danger');
        }
    }

    async function confirmDisable2fa() {
        const code = document.getElementById('twoFactorCode').value;
        const xsrfToken = getCookie('XSRF-TOKEN');

        try {
            const response = await fetch('/api/user/confirm-disable-2fa', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': xsrfToken
                },
                credentials: 'include',
                body: JSON.stringify({ code })
            });

            if (response.ok) {
                const result = await response.json();
                showMessage('profileMessage', result.message, 'success');
                document.getElementById('twoFactorVerification').style.display = 'none';
                await loadUserProfile();
            } else {
                const result = await response.json();
                showMessage('profileMessage', result.message || 'Failed to disable 2FA', 'danger');
            }
        } catch (error) {
            showMessage('profileMessage', 'An error occurred', 'danger');
        }
    }

    async function requestAccountDeletion() {
        if (!confirm('Are you sure you want to delete your account? This action cannot be undone.')) {
            return;
        }

        const xsrfToken = getCookie('XSRF-TOKEN');

        try {
            const response = await fetch('/api/user/request-account-deletion', {
                method: 'POST',
                headers: {
                    'X-CSRF-TOKEN': xsrfToken
                },
                credentials: 'include'
            });

            const result = await response.json();

            if (response.ok) {
                if (result.requiresTwoFactor) {
                    showMessage('profileMessage', result.message, 'info');
                    document.getElementById('deleteAccountVerification').style.display = 'block';
                }
            } else {
                showMessage('profileMessage', result.message || 'Failed to initiate account deletion', 'danger');
            }
        } catch (error) {
            showMessage('profileMessage', 'An error occurred', 'danger');
        }
    }

    async function confirmAccountDeletion() {
        const code = document.getElementById('deleteAccountCode').value;
        const xsrfToken = getCookie('XSRF-TOKEN');

        try {
            const response = await fetch('/api/user/confirm-account-deletion', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': xsrfToken
                },
                credentials: 'include',
                body: JSON.stringify({ code })
            });

            if (response.ok) {
                const result = await response.json();
                alert(result.message);
                window.location.href = '/';
            } else {
                const result = await response.json();
                showMessage('profileMessage', result.message || 'Failed to delete account', 'danger');
            }
        } catch (error) {
            showMessage('profileMessage', 'An error occurred', 'danger');
        }
    }

    function showMessage(elementId, message, type) {
        const element = document.getElementById(elementId);
        element.innerText = message;
        element.className = `alert alert-${type}`;
    }

    function getCookie(name) {
        const value = `; ${document.cookie}`;
        const parts = value.split(`; ${name}=`);
        return parts.length === 2 ? parts.pop().split(';').shift() : "";
    }
</script>